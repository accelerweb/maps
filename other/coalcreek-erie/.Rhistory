colnames(df) <- c('Outfall','Design Flow Location','2-yr','5-yr','10-yr','50-yr','100-yr')
dftable <- ztable(df, caption="Table 3-5: SWMM Output, Outfalls",
caption.placement="top", caption.position="l", booktabs=T)
rgroup = c("Eagle Canyon","North St. Vrain","Ewald Avenue","South St. Vrain","Steamboat Valley","Third Avenue","South 2nd Avenue","Red Hill Gulch","Lyons Valley","Stone Canyon")
n.rgroup = c(1,3,1,3,3,4,1,3,1,2)
dftable = addrgroup(dftable,rgroup=rgroup,n.rgroup=n.rgroup)
update_ztable(dftable, include.rownames = FALSE, align="ccccccc")
df = read.csv("table3-6.csv", as.is=T, encoding="UTF-8")
colnames(df) <- c('Outfall','Structure','Size','Approximate Capacity (cfs)','Approximate Return Period')
dftable <- ztable(df, caption="Table 3-6: SWMM Output, Existing Structures",
caption.placement="top", caption.position="l", booktabs=T)
rgroup = c("Steamboat Valley","Third Avenue","South 2nd Avenue","Ewald Avenue","Lyons Valley","Eastern Lyons","Stone Canyon")
n.rgroup = c(9,3,3,1,4,1,2)
dftable = addrgroup(dftable,rgroup=rgroup,n.rgroup=n.rgroup)
update_ztable(dftable, include.rownames = FALSE, align="ccccc")
df = read.csv("table3-6.csv", as.is=T, encoding="UTF-8")
colnames(df) <- c('Outfall','Structure','Size','Approximate Capacity (cfs)','Approximate Return Period')
dftable <- ztable(df, caption="Table 3-6: SWMM Output, Existing Structures",
caption.placement="top", caption.position="l", booktabs=T)
rgroup = c("Steamboat Valley","Third Avenue","South 2nd Avenue","Ewald Avenue","Lyons Valley","Eastern Lyons","Stone Canyon")
n.rgroup = c(9,3,3,1,4,1,2)
dftable = addrgroup(dftable,rgroup=rgroup,n.rgroup=n.rgroup)
update_ztable(dftable, include.rownames = FALSE, align="ccccc")
df = read.csv("table3-6.csv", as.is=T, encoding="UTF-8")
colnames(df) <- c('Outfall','Structure','Size','Approximate Capacity (cfs)','Approximate Return Period')
dftable <- ztable(df, caption="Table 3-6: SWMM Output, Existing Structures",
caption.placement="top", caption.position="l", booktabs=T)
rgroup = c("Steamboat Valley","Third Avenue","South 2nd Avenue","Ewald Avenue","Lyons Valley","Eastern Lyons","Stone Canyon")
n.rgroup = c(9,3,3,1,4,1,2)
dftable = addrgroup(dftable,rgroup=rgroup,n.rgroup=n.rgroup)
update_ztable(dftable, include.rownames = FALSE, align="cccp{1in}p{1in}")
library(tufte)
library(xtable)
library(knitr)
library(ztable)
options(ztable.type="html")
options(ztable.zebra=1)
options(ztable.zebra.color="platinum")
options(ztable.colnames.bold=TRUE)
setwd('C:/Users/Eben/Documents/GIS/Lyons/Report')
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, warning = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
df = read.csv("table6-1.csv", as.is=T, encoding="UTF-8")
colnames(df) <- c('Alt ID','Description','Capital','Easement / ROW','Engineering','Legal / Admin','Contract Admin / CM','Contingency','Total Capital Cost','Annual O-M Cost','50-Year O-M Cost')
dftable <- ztable(df, caption="Table 6-1: Cost Summary",
caption.placement="top", caption.position="l", align="p{.3in}p{1in}p{.35in}p{.35in}p{.45in}p{.35in}p{.35in}p{.45in}p{.35in}p{.35in}p{.35in}", include.rownames = FALSE, booktabs=T, size=2)
dftable
library(tufte)
library(xtable)
library(knitr)
library(ztable)
options(ztable.type="html")
options(ztable.zebra=1)
options(ztable.zebra.color="platinum")
options(ztable.colnames.bold=TRUE)
setwd('C:/Users/Eben/Documents/GIS/Lyons/Report')
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, warning = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
df = read.csv("table6-1.csv", as.is=T, encoding="UTF-8")
colnames(df) <- c('Alt ID','Description','Capital','Easement / ROW','Engineering','Legal / Admin','Contract Admin / CM','Contingency','Total Capital Cost','Annual O-M Cost','50-Year O-M Cost')
dftable <- ztable(df, caption="Table 6-1: Cost Summary",
caption.placement="top", caption.position="l", align="p{.3in}p{1in}p{.35in}p{.35in}p{.45in}p{.35in}p{.35in}p{.45in}p{.35in}p{.35in}p{.35in}", include.rownames = FALSE, booktabs=T, size=2)
dftable
install.packages("maps")
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.2) +
geom_polygon(data = state_df, colour = "white", fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="magma")
install.packages("mapproj")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.2) +
geom_polygon(data = state_df, colour = "white", fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="magma")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.1) +
geom_polygon(data = state_df, colour = "white", size = 0.3, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="magma")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.1) +
geom_polygon(data = state_df, colour = "white", size = 0.3, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="plasma")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.1) +
geom_polygon(data = state_df, colour = "white", size = 0.3, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="cool")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.1) +
geom_polygon(data = state_df, colour = "white", size = 0.3, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.5) +
geom_polygon(data = state_df, colour = "white", size = 0.3, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 2) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.05) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2))
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.05) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.05) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
install.packages("cartography")
library(ggplot2)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate)) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
setwd('C:/Users/Eben/Documents/Github/maps/other/coalcreek-erie')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
options(max.print = 99999999)
json1 <- readOGR(dsn = 'boulderParcels.geojson', layer = 'OGRGeoJSON')
json1.sf <- st_as_sf(json)
json2 <- readOGR(dsn = 'weldParcels.geojson', layer = 'OGRGeoJSON')
json2.sf <- st_as_sf(json)
json1.sf <- st_as_sf(json1)
json2.sf <- st_as_sf(json2)
json2.sf <- <- rename(json2.sf, c('owner_name'='NAME'))
json2.sf <- rename(json2.sf, c('owner_name'='NAME'))
json2.sf <- rename(json2.sf, 'owner_name'='NAME')
json2.sf <- rename(json2.sf, owner_name=NAME)
json2.sf[is.na(isPublic)] <- 'F'
json2.sf[is.na(json2.sf.isPublic)] <- 'F'
json2.sf[is.na(json2.sf$isPublic)] <- 'F'
json2.sf[is.na($isPublic)] <- 'F'
merge(json1.sf, json2.sf)
merge.sf(json1.sf, json2.sf)
merge(json1.sf, json2.sf)
st_merge(json1.sf, json2.sf)
json <- st_merge(json1.sf, json2.sf)
json <- st_union(json1.sf, json2.sf)
install.packages("geos")
json <- st_combine(json1.sf, json2.sf)
json1 <- as.data.frame(json1.sf)
json <- merge(json2.sf, json1)
json <- merge(json2.sf, json1 = true)
json <- merge(json1, json2.sf)
json <- st_combine(json1.sf, json2.sf)
json <- st_combine(json1.sf)
json <- st_as_sf(json)
json <- read_shape(json, as.sf = T)
json <- rbind(json1.sf, json2.sf)
json1.sf <- st_as_sf(json1)
json2 <- readOGR(dsn = 'weldParcels.geojson', layer = 'OGRGeoJSON')
json2.sf <- st_as_sf(json2)
json2.sf <- rename(json2.sf, owner_name=NAME)
json1 <- readOGR(dsn = 'boulderParcels.geojson', layer = 'OGRGeoJSON')
json1.sf <- st_as_sf(json1)
json <- rbind(json1.sf, json2.sf)
print(json.isOwner)
print(json$isOwner)
json$isOwner[is.na(json$isOwner)] <- 'F'
json$isOwner[is.na(json$isOwner)] <- 'N'
json$isPublic[is.na(json$isPublic)] <- 'N'
print(json.isPublic)
print(json$isPublic)
json$isPublic[is.na(json$isPublic)] <- N
json$isPublic[is.na(json$isPublic)] <- 'N'
json.proj <- st_transform(json.sf, 4326)
json.sf <- rbind(json1.sf, json2.sf)
json.proj <- st_transform(json.sf, 4326)
json.geom <- st_geometry(json.proj)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000
st_geometry(json.proj) <- json.geom
st_geometry(json.sf) <- json.geom
jsonUpdate <- json.sf %>%
replace_na(isPublic = "N") # %>%
install.packages("tidyr")
library(tidyr)
jsonUpdate <- json.sf %>%
replace_na(isPublic = "N") # %>%
View(jsonUpdate)
jsonUpdate <- json.sf %>%
replace_na(list(isPublic = "N")) # %>%
jsonUpdate <- json.sf %>%
replace_na(json.sf, replace = list(isPublic = "N")) # %>%
json.sf$isPublic <- na_if(json.sf$isPublic, 'N')
json1 <- readOGR(dsn = 'boulderParcels.geojson', layer = 'OGRGeoJSON')
json1.sf <- st_as_sf(json1,stringsAsFactors=FALSE)
json1.sf <- st_as_sf(json1)
as.character(json1.sf$isPublic)
json1.sf$isPublic <- as.character(json1.sf$isPublic)
json1 <- readOGR(dsn = 'boulderParcels.geojson', layer = 'OGRGeoJSON')
json1.sf <- st_as_sf(json1)
json2 <- readOGR(dsn = 'weldParcels.geojson', layer = 'OGRGeoJSON')
json2.sf <- st_as_sf(json2)
json2.sf <- rename(json2.sf, owner_name=NAME)
json.sf <- rbind(json1.sf, json2.sf)
json.sf$isPublic <- as.character(json.sf$isPublic)
json.proj <- st_transform(json.sf, 4326)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000
st_geometry(json.sf) <- json.geom
json.sf$isPublic <- na_if(json.sf$isPublic, 'N')
jsonUpdate <- json.sf %>%
replace_na(isPublic = "N") # %>%
print(jsonUpdate$isPublic)
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,isPublic=NA,'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,is.na[isPublic],'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,NA,'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,'NA','N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,isPublic='NA','N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,isPublic=='NA','N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,isPublic==NA,'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,is.na,'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,(is.na),'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,NA,'N')) # %>%
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,isPublic==NA,'N')) # %>%
View(jsonUpdate)
jsonUpdate <- json.sf %>%
mutate(isPublic = replace(isPublic,isPublic!='Y','N')) # %>%
jsonUpdate[is.na(jsonUpdate)] <- 'N'
jsonUpdate$isPublic[is.na(jsonUpdate$isPublic)] <- 'N'
json.sf$isPublic[is.na(json.sf$isPublic)] <- 'N'
st_write(jsonUpdate, 'parcels.geojson') # write with updated semantic data
json1 <- readOGR(dsn = 'erieNeighborhoods.geojson', layer = 'OGRGeoJSON')
json1 <- readOGR(dsn = 'C:/Users/Eben/Documents/GIS/CoalCreek/ErieSubdivisions.geojson', layer = 'OGRGeoJSON')
plot(json1.sf)
json1.sf <- st_as_sf(json1)
plot(json1.sf)
