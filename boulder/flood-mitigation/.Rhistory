scale_fill_viridis(option="inferno")
library(ggplot2)
library(maps)
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.05) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2))
library(viridis)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.05) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
library(ggplot2)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), size = 0.05) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
install.packages("cartography")
library(ggplot2)
unemp <- read.csv("http://datasets.flowingdata.com/unemployment09.csv",
header = FALSE, stringsAsFactors = FALSE)
names(unemp) <- c("id", "state_fips", "county_fips", "name", "year",
"?", "?", "?", "rate")
unemp$county <- tolower(gsub(" County, [A-Z]{2}", "", unemp$name))
unemp$county <- gsub("^(.*) parish, ..$","\\1", unemp$county)
unemp$state <- gsub("^.*([A-Z]{2}).*$", "\\1", unemp$name)
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate)) +
geom_polygon(data = state_df, colour = "white", size = 0.5, fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="inferno")
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(plyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json = geojson.read(hazus.geojson)
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(plyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json = geojson_read(hazus.geojson)
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(plyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json = geojson_read('hazus.geojson')
geojson_write(json)
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(plyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
summary(json)
geojson_write(json, file = 'hazusRewrite.geojson')
json <- format(json, round('Depth_FT',2))
json@data <- format(json@data, round('Depth_FT',2))
json@data <- format(json@data, round($Depth_FT,2))
json@data <- format(json@data, round(Depth_FT,2))
json <- format(json, round(json$Depth_FT,2))
json.df <- json@data
json.df <- format(json, round(Depth_FT,2))
json.df <- format(json.df, round(Depth_FT,2))
json.df <- format(json.df, round(json.df$Depth_FT,2))
geojson_write(json, file = 'hazusRewrite.geojson')
json.df <- format(json.df, round(json.df$Depth_FT,2))
json.df <- format(json.df, round($Depth_FT,2))
json <- read_shape('hazus.geojson', GDAL1_integer64_policy=TRUE, as.sf = T)
json <- read_shape('hazus.geojson', layer = 'OGRGeoJSON', GDAL1_integer64_policy=TRUE, as.sf = T)
json <- read_shape(dsn = 'hazus.geojson', layer = 'OGRGeoJSON', GDAL1_integer64_policy=TRUE, as.sf = T)
json <- read_shape(dsn = 'hazus.geojson', layer = 'OGRGeoJSON', GDAL1_integer64_policy=TRUE, as.sf = T)
json <- read_shape(dsn = 'hazus.geojson', layer = 'OGRGeoJSON', as.sf = T)
json <- read_shape('hazus.geojson', layer = 'OGRGeoJSON', as.sf = T)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON', as.sf = TRUE)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus <- format(hazus, round(Depth_FT,2))
hazus@data <- format(hazus@data, round(Depth_FT,2))
hazus <- format(hazus, round('Depth_FT',2))
hazus <- format(hazus, round(c('Depth_FT'),2))
hazus <- format(hazus, round(c(Depth_FT),2))
View(hazus)
hazus <- format(round(Depth_FT,2))
hazus <- format(round(hazus$Depth_FT,2))
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus$Depth_FT <- format(round(hazus$Depth_FT,2))
hazus$BldgLossUS <- format(round(hazus$BldgLossUS,0))
geojson_write(hazus, file = 'hazusRewrite.geojson')
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus$Depth_FT <- format(round(hazus$Depth_FT,2))
View(hazus)
hazus <- mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus %>% mutate(hazus$Depth_FT = round(hazus$Depth_FT,2), hazus$BldgLossUS = round(hazus$BldgLossUS,0))
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus %>% mutate(hazus$Depth_FT = round(hazus$Depth_FT,2), hazus$BldgLossUS = round(hazus$BldgLossUS,0))
hazus %>% mutate(Depth_FT = round(hazus$Depth_FT,2), hazus$BldgLossUS = round(hazus$BldgLossUS,0))
hazus %>% mutate(Depth_FT = round(hazus$Depth_FT,2), BldgLossUS = round(hazus$BldgLossUS,0))
View(hazus)
hazus %>% mutate(Depth_FT = round(hazus$Depth_FT,2), BldgLossUS = round(hazus$BldgLossUS,0))
hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
View(hazus)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
geojson_write(hazus, file = 'hazusRewrite.geojson')
hazus <- mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus$Depth_FT <- mutate(Depth_FT = round(Depth_FT,2))
hazus$Depth_FT <- mutate(hazus$Depth_FT = round(hazus$Depth_FT,2))
hazus$Depth_FT <- mutate(Depth_FT = round(hazus$Depth_FT,2))
hazus <- mutate_.sf(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus <- mutate_.sf(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus %>% mutate_.sf(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
newHazus <- hazus %>% mutate_.sf(Depth_FT = round(Depth_FT,2))
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(plyr)
library(rgdal)
library(geojsonio)
newHazus <- hazus %>% mutate_.sf(Depth_FT = round(Depth_FT,2))
newHazus <- hazus %>% mutate_.sf(Depth_FT = round(Depth_FT,2),)
newHazus <- mutate_.sf(Depth_FT = round(Depth_FT,2),)
hazus %>% mutate_.sf(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus$Depth_FT %>% mutate(Depth_FT = round(Depth_FT,2))
hazus_sp <- as(hazus, "Spatial")
glimpse(hazus)
hazus %>% mutate(depth = round(Depth_FT,2))
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(plyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus %>% mutate(depth = round(Depth_FT,2)) %>% slice(1:3)
hazus <- hazus %>% mutate(depth = round(Depth_FT,2)) %>% slice(1:3)
hazus <- hazus %>% mutate(Depth_FT = round(Depth_FT,2))
hazus <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazus <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0)) %>% select(-one_of('depth'))
geojson_write(hazus, file = 'hazusRewrite.geojson')
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = TRUE)
hazus <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0)) %>% select(-one_of('depth'))
geojson_write(hazus, file = 'hazusRewrite.geojson')
hazusUpdate <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
View(hazusUpdate)
View(hazus)
geojson_write(hazusUpdate, file = 'hazusRewrite.geojson')
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
hazus <- read_shape(json, GDAL1_integer64_policy=TRUE, as.sf = TRUE)
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', GDAL1_integer64_policy=TRUE, as.sf = TRUE)
hazusUpdate <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
View(hazus)
View(hazusUpdate)
geojson_write(hazusUpdate, file = 'hazusRewrite.geojson')
writeOGR(hazusUpdate, 'hazusUpdate', driver = 'GeoJSON')
writeOGR(hazusUpdate, 'hazusUpdate', layer = 'Hazus' driver = 'GeoJSON')
writeOGR(hazusUpdate, 'hazusUpdate', layer = 'Hazus', driver = 'GeoJSON')
install.packages("sf2")
st_write(hazusUpdate, 'hazusUpdate.geojson')
View(hazusUpdate)
hazusUpdate <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0), geometry = round(geometry,9))
hazusUpdate <- st_set_precision(hazusUpdate,9)
hazusUpdate <- st_set_precision(hazusUpdate, precision = 9)
hazusUpdate <- st_set_precision(hazusUpdate)
st_precision(hazusUpdate)
st_precision(hazusUpdate$geometry)
st_set_precision(hazusUpdate$geometry, 1000000000)
st_set_precision(hazusUpdate, 1000000000)
st_set_precision(hazusUpdate$precision, 1000000000)
attributes(hazusUpdate)
attributes(hazusUpdate.geom)
hazus.geom <- st_geometry(hazusUpdate)
st_set_precision(hazus.geom, 1000000000)
st_set_precision(hazus.geom$precision, 1000000000)
attributes(hazus.geom)
st_set_precision(hazus.geom, 1000)
hazus.geom[[1]]
hazus.geom <- st_set_precision(hazus.geom, 1000)
hazusUpdate <- st_set_precision(hazusUpdate, 1000)
hazusUpdate <- st_precision(hazusUpdate, 1000)
hazusUpdate <- st_precision(hazusUpdate, precision = 1000)
hazusUpdate <- st_precision(hazusUpdate)
hazusUpdate <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazusUpdate <- st_set_precision(hazusUpdate, 1000)
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
hazus <- read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', GDAL1_integer64_policy=TRUE, as.sf = TRUE)
hazusUpdate <- hazus %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
hazusUpdate <- st_set_precision(hazusUpdate, 1000)
hazus.geom <- st_geometry(hazusUpdate)
hazus.geom <- st_set_precision(hazusUpdate, 1000)
hazus.geom <- st_set_precision(hazus.geom, 1000)
attributes(hazus.geom)
hazus.geom$precision <- st_set_precision(hazus.geom$precision, 1000)
hazus.geom <- st_set_precision(hazus.geom, 1000)
hazus.geom[[1]] <- st_set_precision(hazus.geom[[1]], 1000)
hazus.geom[[1]]
hazus.geom[[1]]$precision
hazus.geom$precision
attributes(hazus.geom)
hazus.geom.attributes$precision
hazus.geom.precision
attributes(hazus.geom)
attributes(hazusUpdate)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
json.sf <- st_as_sfc(json)
json.sf <- st_as_sf(json)
View(json.sf)
jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,0))
st_write(hazusUpdate, 'hazusUpdate.geojson')
st_write(jsonUpdate, 'hazusUpdate.geojson')
jsonUpdate <- st_set_precision(jsonUpdate, 1000)
json.sf <- st_as_sf(json)
json.sf <- st_set_precision(json.sf, 1000)
jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1))
st_write(jsonUpdate, 'hazusUpdate.geojson')
json.geom <- st_geometry(json.sf)
attributes(json.geom)
attributes(json.sf)
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON')
json <- readOGR(dsn = 'hazusUpdate.geojson', layer = 'OGRGeoJSON')
json.sf <- st_as_sf(json)
json.sf <- st_set_precision(json.sf, 1000)
json.geom <- st_geometry(json.sf)
json.geom <- st_set_precision(json.geom, 1000)
print(json.geom)
print(json.sf)
print(json.sf[1:5])
print(json.sf, n = 5)
st_get_precision(json.sf)
st_precision(json.sf)
st_set_precision(json.sf[1], 1000)
st_precision(json.sf[1])
json <- readOGR(dsn = 'hazusUpdate.geojson', layer = 'OGRGeoJSON')
json.sf <- st_as_sf(json)
st_precision(json.sf) <- 1000
View(json.sf)
json <- readOGR(dsn = 'hazusUpdate.geojson', layer = 'OGRGeoJSON')
json.sf <- st_as_sf(json)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000
View(json.sf)
st_geometry(json.sf) <- json.geom
jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1))
st_write(jsonUpdate, 'hazusUpdate.geojson')
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
library(geojsonio)
options(max.print = 99999999)
json = read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', GDAL1_integer64_policy=TRUE, as.sf = T) # use this for shp
# json <- readOGR(dsn = 'hazus.geojson', layer = 'OGRGeoJSON') use this for geojson
json.sf <- st_as_sf(json)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000
st_geometry(json.sf) <- json.geom
jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1))
st_write(jsonUpdate, 'hazusUpdate.geojson')
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') use this for geojson
json.sf <- st_as_sf(json)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000
st_geometry(json.sf) <- json.geom
# jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1))
st_write(json.sf, 'structuresUpdate.geojson')
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') use this for geojson
json.sf <- st_as_sf(json)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000
st_geometry(json.sf) <- json.geom
# jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1))
st_write(json.sf, 'structuresUpdate.geojson')
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') # use this for geojson
json.sf <- st_as_sf(json)
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000
st_geometry(json.sf) <- json.geom
# jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1))
st_write(json.sf, 'structuresUpdate.geojson')
# json.sf = read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', GDAL1_integer64_policy=TRUE, as.sf = T) # use this for shp
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') # use this for geojson
json.sf <- st_as_sf(json) # use this for geojson
json.sf <- st_transform(json.sf, 3857) # project to wgs84
json.geom <- st_geometry(json.sf)
st_precision(json.geom) <- 1000000 # set coordinate precision to 6 decimals
st_geometry(json.sf) <- json.geom
# jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1)) # update semantic data
st_write(json.sf, 'structuresUpdate.geojson')
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') # use this for geojson
json.sf <- st_as_sf(json) # use this for geojson
json.proj <- st_transform(json.sf, 3857) # project to wgs84
json.geom <- st_geometry(json.proj)
st_precision(json.geom) <- 1000000 # set coordinate precision to 6 decimals
st_geometry(json.proj) <- json.geom
# jsonUpdate <- json.sf %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1)) # update semantic data
st_write(json.proj, 'structuresUpdate.geojson')
json.proj <- st_transform(json.sf, 4326) # project to wgs84
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') # use this for geojson
json.sf <- st_as_sf(json) # use this for geojson
json.proj <- st_transform(json.sf, 4326) # project to wgs84
setwd('C:/Users/Eben/Documents/Github/maps/boulder/flood-mitigation')
library(tmap)
library(tmaptools)
library(sf)
library(plyr)
library(dplyr)
library(rgdal)
options(max.print = 99999999)
json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON') # use this for geojson
json.sf <- st_as_sf(json) # use this for geojson
json.proj <- st_transform(json.sf, "+init=epsg:4326") # project to wgs84
json.sf = read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', GDAL1_integer64_policy=TRUE, as.sf = T) # use this for shp
json.proj <- st_transform(json.sf, 3857) # project to wgs84
json.proj <- st_transform(json.sf, 4326) # project to wgs84
json.geom <- st_geometry(json.proj)
st_precision(json.geom) <- 1000000 # set coordinate precision to 6 decimals
st_geometry(json.proj) <- json.geom
jsonUpdate <- json.proj %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1)) # update semantic data
st_write(jsonUpdate, 'structuresUpdate.geojson')
json.sf = read_shape('P:/P/17004UGC/07_GIS/Webmap/ProgressMeeting042517/hazus.shp', as.sf = T) # use this for shp
View(json.sf)
json.proj <- st_transform(json.sf, 4326) # project to wgs84
json.geom <- st_geometry(json.proj)
st_precision(json.geom) <- 1000000 # set coordinate precision to 6 decimals
st_geometry(json.proj) <- json.geom
jsonUpdate <- json.proj %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-1)) # update semantic data
View(jsonUpdate)
jsonUpdate <- json.proj %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(BldgLossUS,-2)) # update semantic data
View(jsonUpdate)
st_write(jsonUpdate, 'structuresUpdate.geojson') # write with updated semantic data
st_write(jsonUpdate, 'hazusUpdate.geojson') # write with updated semantic data
View(jsonUpdate)
jsonUpdate <- json.proj %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2))
# write geojson
st_write(jsonUpdate, 'hazusUpdate.geojson') # write with updated semantic data
jsonUpdate <- json.proj %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = round(as.integer(BldgLossUS,-2)))
st_write(jsonUpdate, 'hazusUpdate.geojson') # write with updated semantic data
jsonUpdate <- json.proj %>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2)))
st_write(jsonUpdate, 'hazusUpdate.geojson') # write with updated semantic data
jsonUpdate <- json.proj
%>% mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2)))
%>% select(json.proj, -(OBJECTID))
jsonUpdate <- json.proj %>%
mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2))) %>%
select(json.proj, -(OBJECTID))
jsonUpdate <- json.proj %>%
mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2))) %>%
select(json.proj, -OBJECTID)
jsonUpdate <- json.proj %>%
mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2))) %>%
select(-OBJECTID)
st_write(jsonUpdate, 'hazusUpdate.geojson') # write with updated semantic data
jsonUpdate <- json.proj %>%
mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2))) %>%
select(c(Depth_FT,BldgLossUS))
View(jsonUpdate)
st_write(jsonUpdate, 'hazusUpdate.geojson') # write with updated semantic data
# read in original file
# from shp
json.sf = read_shape('P:/P/17004UGC/07_GIS/FROM_COB/Storm_Drains.shp', as.sf = T)
# from geojson
# json <- readOGR(dsn = 'structures.geojson', layer = 'OGRGeoJSON')
# json.sf <- st_as_sf(json)
# project to wgs84
json.proj <- st_transform(json.sf, 4326)
# set coordinate precision to 6 decimals
json.geom <- st_geometry(json.proj)
st_precision(json.geom) <- 1000000
st_geometry(json.proj) <- json.geom
# update semantic data
jsonUpdate <- json.proj %>%
# mutate(Depth_FT = round(Depth_FT,2), BldgLossUS = as.integer(round(BldgLossUS,-2))) %>%
select(c(DIAMETER,DIAMETER2,MATERIAL))
# write geojson
st_write(jsonUpdate, 'stormDrains.geojson') # write with updated semantic data
# st_write(json.proj, 'structuresUpdate.geojson') # write with original semantic data
